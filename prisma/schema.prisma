// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

model User {
    // utility
    id         String       @id @default(uuid())
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
    // data
    email      String       @unique
    name       String
    password   String
    // relations
    LoginToken LoginToken[]
    Post       Post[]
	trackingPantry Pantry[] @relation("UserTrackingPantry")
}

model LoginToken {
    // utility
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    // data
    redirect  String   @default("/")
    // relations
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}

model Ingredient {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	// data
	name String @unique
	category String
	// relations
	inPantry PantryItem[]
}

model PantryItem {
	id String @id @default(uuid())
	// data
	inStock Boolean @default(true)
	expiration DateTime?
	// relations
	ingredientId String
	ingredient Ingredient @relation(fields: [ingredientId], references: [id])
	pantryId String
	pantry Pantry @relation(fields: [pantryId], references: [id])
	@@unique([ingredientId, pantryId])
}

model Pantry {
	id String @id @default(uuid())
	createdAt DateTime @default(now())
	updatedAt DateTime @updatedAt
	// data
	name String
	// relations
	inventory PantryItem[]
	trackedBy User[] @relation("UserTrackingPantry")
}

// leftover from tutorial, possible base for comments?
model Post {
    // utility
    id        String   @unique @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // data
    title     String
    body      String
    // relations
    userId    String
    user      User     @relation(fields: [userId], references: [id])
}
